# Keylime Deployment for Kubernetes

This project provides a streamlined way to deploy Keylime components (Registrar, Verifier, Agent, Tenant) and a PostgreSQL database to a Kubernetes cluster. It includes scripts to automate the generation of manifests and the deployment process.

## Prerequisites

- A running Kubernetes cluster
- `kubectl` configured to connect to your cluster
- `python3` and `pip3` installed
- `bash` or a compatible shell

## Quick Start

The `deploy.sh` script is the primary way to deploy and manage the Keylime components in your cluster. It automates the entire process, from generating manifests to applying them.

### Automated Deployment

The `deploy.sh` script handles the generation of Kubernetes manifests and their deployment.

**Full Deployment (Default)**

To deploy all Keylime components to the `keylime-system` namespace with a single agent, simply run:

```bash
./deploy.sh --namespace keylime-system
```

**Customizing the Deployment**

The script offers flags to customize the deployment:

- `--namespace <ns>`: Specify a different namespace.
- `--agents <n>`: Specify the number of agent pods to create.
- `[component...]`: Specify one or more components to deploy.

**Available Components:**
- `namespace`
- `config`
- `database`
- `registrar`
- `verifier`
- `agent`
- `tenant`

---

### Deployment Examples

**Deploy to a custom namespace:**
```bash
./deploy.sh --namespace my-keylime-app
```

**Deploy with multiple agents:**
This will create three agent pods, each with a unique configuration.
```bash
./deploy.sh --namespace ras --agents 3
```

**Deploy only specific components:**
If you've made changes to the verifier and agent, you can redeploy just those components.
```bash
./deploy.sh verifier agent
```

**Combine all options:**
Deploy 5 agents and the verifier to a custom namespace.
```bash
./deploy.sh --namespace my-app --agents 5 verifier agent
```

**Get help:**
To see all available options and components, use the `--help` flag.
```bash
./deploy.sh --help
```

---

### Verifying the Deployment

After running the deployment script, you can check the status of the pods and services in the target namespace:

```bash
kubectl get all -n <your-namespace>
```

### Interacting with the Tenant Pod

To run Keylime commands, you can `exec` into the tenant CLI pod:

```bash
kubectl exec -it keylime-cli -n <your-namespace> -- /bin/bash
```

Inside the pod, you can then use the `keylime_tenant` CLI. For example:

```bash
keylime_tenant -c status
```                   
 

